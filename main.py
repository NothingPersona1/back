# main.py
"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
Lorentzian Classification —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import argparse
import os
from config import StaticConfig, count_total_combinations
from data_loader import DataLoader
from optimizer import StrategyOptimizer

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    parser = argparse.ArgumentParser(
        description='–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Lorentzian Classification'
    )
    
    parser.add_argument('--symbol', type=str, default='BTC/USDT',
                       help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')
    parser.add_argument('--exchange', type=str, default='bybit',
                       help='–ë–∏—Ä–∂–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--timeframe', type=str, default='1h',
                       choices=['1m', '5m', '15m', '30m', '1h', '4h', '1d'],
                       help='–¢–∞–π–º—Ñ—Ä–µ–π–º')
    parser.add_argument('--data_file', type=str, default=None,
                       help='–ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º CSV (—á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å –±–∏—Ä–∂–∏)')
    parser.add_argument('--save_data', action='store_true',
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--n_jobs', type=int, default=-1,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (-1 –¥–ª—è –≤—Å–µ—Ö —è–¥–µ—Ä)')
    parser.add_argument('--output_dir', type=str, default='results',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    print("\n" + "="*60)
    print("LORENTZIAN CLASSIFICATION OPTIMIZER")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    static_config = StaticConfig(
        exchange=args.exchange,
        symbol=args.symbol,
        timeframe=args.timeframe
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_loader = DataLoader(static_config)
    
    if args.data_file:
        print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {args.data_file}")
        df = data_loader.load_data(args.data_file)
    else:
        print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ {args.exchange}")
        print(f"–ü–∞—Ä–∞: {args.symbol}, –¢–∞–π–º—Ñ—Ä–µ–π–º: {args.timeframe}")
        df = data_loader.fetch_ohlcv(args.symbol, args.timeframe)
        
        if args.save_data:
            os.makedirs(args.output_dir, exist_ok=True)
            filename = f"{args.symbol.replace('/', '_')}_{args.timeframe}_{args.exchange}.csv"
            filepath = os.path.join(args.output_dir, filename)
            data_loader.save_data(df, filepath)
            print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
    
    print(f"\n–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df.index[0]} - {df.index[-1]}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤: {len(df)}")
    
    # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    total_combinations = count_total_combinations()
    n_cores = os.cpu_count() if args.n_jobs == -1 else args.n_jobs
    estimated_time = total_combinations * 0.5 / n_cores  # ~0.5 —Å–µ–∫ –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    
    print(f"\n–í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_combinations}")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {n_cores}")
    print(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {estimated_time/60:.1f} –º–∏–Ω—É—Ç")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    if total_combinations > 5000:
        response = input(f"\n‚ö†Ô∏è  –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
        if response.lower() != 'y':
            print("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimizer = StrategyOptimizer(static_config)
    results = optimizer.optimize(df, n_jobs=args.n_jobs)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    optimizer.save_results(args.output_dir)
    
    # –í—ã–≤–æ–¥ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    print(f"\n{'='*60}")
    print("–ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ò–ù–î–ò–ö–ê–¢–û–†–ê TRADINGVIEW:")
    print("="*60)
    
    best_params = optimizer.get_best_config_for_indicator()
    print(f"Neighbors Count: {best_params['neighbors_count']}")
    print(f"Use Volatility Filter: {best_params['use_volatility_filter']}")
    print(f"Use Regime Filter: {best_params['use_regime_filter']}")
    print(f"Use EMA Filter: {best_params['use_ema_filter']}")
    print(f"Use SMA Filter: {best_params['use_sma_filter']}")
    print(f"Use ADX Filter: {best_params['use_adx_filter']}")
    print(f"Kernel Lookback Window: {best_params['kernel_lookback']}")
    print(f"Kernel Relative Weighting: {best_params['kernel_relative_weighting']}")
    print(f"Start Regression at Bar: {best_params['kernel_regression_level']}")
    print(f"Use Kernel Smoothing: {best_params['use_kernel_smoothing']}")
    print(f"Use Dynamic Exits: {best_params['use_dynamic_exits']}")
    print(f"\n–û–∂–∏–¥–∞–µ–º—ã–π Win Rate: {best_params['expected_win_rate']}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π Sharpe Ratio: {best_params['expected_sharpe']}")
    
    print(f"\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {args.output_dir}")

if __name__ == "__main__":
    main()