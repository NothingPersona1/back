# optimizer.py
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Lorentzian Classification
"""

import pandas as pd
import numpy as np
from typing import List, Dict, Tuple
from dataclasses import dataclass, asdict
import json
import os
from datetime import datetime
from concurrent.futures import ProcessPoolExecutor, as_completed
from tqdm import tqdm

from config import StaticConfig, DynamicParams, generate_all_combinations, count_total_combinations
from backtester import Backtester, BacktestResults

@dataclass
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    params: DynamicParams
    win_rate: float
    total_trades: int
    total_pnl_percent: float
    win_loss_ratio: float
    sharpe_ratio: float
    max_drawdown_percent: float
    score: float  # –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞

def calculate_score(results: BacktestResults) -> float:
    """–†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if results.total_trades < 10:  # –ú–∏–Ω–∏–º—É–º —Å–¥–µ–ª–æ–∫ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        return -999
    
    # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    score = 0.0
    score += results.win_rate * 30  # Win rate (0-1) * 30
    score += min(results.sharpe_ratio, 3) * 20  # Sharpe (cap at 3) * 20
    score += min(results.win_loss_ratio, 3) * 15  # W/L ratio (cap at 3) * 15
    score += min(results.total_pnl_percent / 100, 2) * 20  # P&L % (cap at 200%) * 20
    score -= max(abs(results.max_drawdown_percent) / 50, 1) * 15  # Drawdown penalty
    
    return score

def test_single_configuration(df: pd.DataFrame, static_config: StaticConfig, 
                             params: DynamicParams) -> OptimizationResult:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    try:
        backtester = Backtester(static_config, params)
        results = backtester.run_backtest(df)
        score = calculate_score(results)
        
        return OptimizationResult(
            params=params,
            win_rate=results.win_rate,
            total_trades=results.total_trades,
            total_pnl_percent=results.total_pnl_percent,
            win_loss_ratio=results.win_loss_ratio,
            sharpe_ratio=results.sharpe_ratio,
            max_drawdown_percent=results.max_drawdown_percent,
            score=score
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return OptimizationResult(
            params=params,
            win_rate=0, total_trades=0, total_pnl_percent=0,
            win_loss_ratio=0, sharpe_ratio=0, max_drawdown_percent=0,
            score=-999
        )

class StrategyOptimizer:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, static_config: StaticConfig):
        self.static_config = static_config
        self.results = []
        
    def optimize(self, df: pd.DataFrame, n_jobs: int = -1) -> List[OptimizationResult]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        Args:
            df: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            n_jobs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (-1 –¥–ª—è –≤—Å–µ—Ö —è–¥–µ—Ä)
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ score
        """
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        all_combinations = generate_all_combinations()
        total = len(all_combinations)
        
        print(f"\n{'='*60}")
        print(f"–ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        print(f"{'='*60}")
        print(f"–ü–∞—Ä–∞: {self.static_config.symbol}")
        print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {self.static_config.timeframe}")
        print(f"–í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total}")
        print(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total * 0.5 / (os.cpu_count() if n_jobs == -1 else n_jobs):.1f} —Å–µ–∫—É–Ω–¥")
        print(f"{'='*60}\n")
        
        if n_jobs == -1:
            n_jobs = os.cpu_count()
        
        results = []
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        with ProcessPoolExecutor(max_workers=n_jobs) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            futures = {
                executor.submit(test_single_configuration, df, self.static_config, params): params
                for params in all_combinations
            }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º
            with tqdm(total=total, desc="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ") as pbar:
                for future in as_completed(futures):
                    result = future.result()
                    results.append(result)
                    pbar.update(1)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if results:
                        best = max(results, key=lambda x: x.score)
                        pbar.set_description(
                            f"–õ—É—á—à–∏–π: WR={best.win_rate:.1%} PnL={best.total_pnl_percent:.1f}%"
                        )
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ score
        results.sort(key=lambda x: x.score, reverse=True)
        self.results = results
        
        # –í—ã–≤–æ–¥ —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_top_results(10)
        
        return results
    
    def print_top_results(self, n: int = 10):
        """–í—ã–≤–æ–¥ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\n{'='*60}")
        print(f"–¢–û–ü-{n} –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
        print(f"{'='*60}\n")
        
        for i, res in enumerate(self.results[:n], 1):
            print(f"#{i:2d} | Score: {res.score:6.2f} | WR: {res.win_rate:5.1%} | "
                  f"Trades: {res.total_trades:4d} | PnL: {res.total_pnl_percent:7.2f}% | "
                  f"Sharpe: {res.sharpe_ratio:5.2f} | WL: {res.win_loss_ratio:4.2f}")
            
            if i == 1:  # –î–µ—Ç–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                print(f"     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                print(f"     - Neighbors: {res.params.neighbors_count}")
                print(f"     - Filters: Vol={res.params.use_volatility_filter}, "
                      f"Reg={res.params.use_regime_filter}, "
                      f"EMA={res.params.use_ema_filter}, "
                      f"SMA={res.params.use_sma_filter}, "
                      f"ADX={res.params.use_adx_filter}")
                print(f"     - Kernel: LB={res.params.kernel_lookback}, "
                      f"RW={res.params.kernel_relative_weighting}, "
                      f"RL={res.params.kernel_regression_level}")
                print(f"     - Dynamic exits: {res.params.use_dynamic_exits}")
                print()
    
    def save_results(self, output_dir: str = "results"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.results:
            print("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        os.makedirs(output_dir, exist_ok=True)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        best = self.results[0]
        best_config = {
            "symbol": self.static_config.symbol,
            "timeframe": self.static_config.timeframe,
            "score": best.score,
            "metrics": {
                "win_rate": best.win_rate,
                "total_trades": best.total_trades,
                "total_pnl_percent": best.total_pnl_percent,
                "sharpe_ratio": best.sharpe_ratio,
                "win_loss_ratio": best.win_loss_ratio,
                "max_drawdown_percent": best.max_drawdown_percent
            },
            "parameters": asdict(best.params)
        }
        
        config_file = os.path.join(output_dir, f"best_config_{self.static_config.symbol.replace('/', '_')}_{timestamp}.json")
        with open(config_file, 'w') as f:
            json.dump(best_config, f, indent=2)
        
        print(f"\n‚úÖ –õ—É—á—à–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
        rows = []
        for res in self.results:
            row = {
                'score': res.score,
                'win_rate': res.win_rate,
                'total_trades': res.total_trades,
                'total_pnl_percent': res.total_pnl_percent,
                'sharpe_ratio': res.sharpe_ratio,
                'win_loss_ratio': res.win_loss_ratio,
                'max_drawdown_percent': res.max_drawdown_percent,
                **asdict(res.params)
            }
            rows.append(row)
        
        df_results = pd.DataFrame(rows)
        csv_file = os.path.join(output_dir, f"all_results_{self.static_config.symbol.replace('/', '_')}_{timestamp}.csv")
        df_results.to_csv(csv_file, index=False)
        
        print(f"‚úÖ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {csv_file}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {len(self.results)}")
        print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {sum(1 for r in self.results if r.total_pnl_percent > 0)}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å WR > 50%: {sum(1 for r in self.results if r.win_rate > 0.5)}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å Sharpe > 1: {sum(1 for r in self.results if r.sharpe_ratio > 1)}")
        
    def get_best_config_for_indicator(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª—É—á—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ"""
        if not self.results:
            return {}
        
        best = self.results[0]
        return {
            "neighbors_count": best.params.neighbors_count,
            "use_volatility_filter": best.params.use_volatility_filter,
            "use_regime_filter": best.params.use_regime_filter,
            "use_ema_filter": best.params.use_ema_filter,
            "use_sma_filter": best.params.use_sma_filter,
            "use_adx_filter": best.params.use_adx_filter,
            "kernel_lookback": best.params.kernel_lookback,
            "kernel_relative_weighting": best.params.kernel_relative_weighting,
            "kernel_regression_level": best.params.kernel_regression_level,
            "use_kernel_smoothing": best.params.use_kernel_smoothing,
            "use_dynamic_exits": best.params.use_dynamic_exits,
            "expected_win_rate": f"{best.win_rate:.1%}",
            "expected_sharpe": f"{best.sharpe_ratio:.2f}"
        }